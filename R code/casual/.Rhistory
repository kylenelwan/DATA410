knitr::opts_chunk$set(echo = TRUE)
library(MPV)
library(MASS)
library(bestglm)
library(glmnet)
library(regclass)
df <- read.csv("hour.csv")
df<- subset(df, select = -c(instant,cnt,dteday))
model <- lm(casual ~. - registered, data = df)
summary(model)
plot(model)
VIF(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x ,lambda=c(-1,1))
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x ,lambda=c(-2,2))
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x)
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x,lambda=seq(-1,1,by=0.5))
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x)
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
bc$x[bc$y > max(bc$y) - 1/2 * qchisq(.95,1)]
bc$x[bc$y > min(bc$y) - 1/2 * qchisq(.95,1)]
bc$x[bc$y > max(bc$y) - 1/2 * qchisq(.95,1)]
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x)
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x, lambda = seq(-1,1,by=0.5))
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
bc$x[which.max(bc$y)]
bc<-boxcox(casual ~. - registered,data = x)
bc$x[which.max(bc$y)]
knitr::opts_chunk$set(echo = TRUE)
library(MPV)
library(MASS)
library(bestglm)
library(glmnet)
library(regclass)
df <- read.csv("hour.csv")
df<- subset(df, select = -c(instant,cnt,dteday))
model <- lm(casual ~. - registered, data = df)
summary(model)
plot(model)
VIF(model)
x <- subset(df, select = - c(season,atemp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
bc$x[which.max(bc$y)]
x <- subset(df, select = - c(season,atemp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
bc<-boxcox(casual ~. - registered,data = x)
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
knitr::opts_chunk$set(echo = TRUE)
library(MPV)
library(MASS)
library(bestglm)
library(glmnet)
library(regclass)
VIF(model)
df <- read.csv("hour.csv")
df<- subset(df, select = -c(instant,cnt,dteday))
model <- lm(casual ~. - registered, data = df)
summary(model)
plot(model)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
x$mnth2 <- x$mnth^2
x$hr2 <- x$hr^2
x$weekday2 <- x$weekday^2
x$weathersit2 <- x$weathersit^2
x$atemp2 <- x$atemp^2
x$hum2 <- x$hum^2
x$windspeed2 <- x$windspeed^2
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
bc$x[which.max(bc$y)]
library(MASS) ## error
boxcox(x,Y)
box.cox <- function(x,y,intercept=TRUE, ylim=NULL,
lambda =seq (-2, 2, len=42), transform.x=FALSE,verbose =TRUE, make.plot=TRUE)
# Applies Box-Cox transformation to y with parameter values lambda,
# prints the fitted regressions, makes a plot of the log likelihood versus lambda, and returns a
# vector containing the log likelihood values, normalized for the transformation, for each lambda.
# x - X matrix for current model (no column of 1's should be included for an intercept term);
# y - Y vector.
# intercept - Set to FALSE for a no-intercept model.
# ylim - The range of log-likelihood values on the y-axis (if NULL, then use range(y)).
#        Useful if you want to use the same scale for two plots.
# lambda - Y is raised to the power lambda. For log(Y) set lambda=0.
# transform.x - Apply the same transformation to all elements of x?
# verbose - Print fitted regression for each lambda?
# make.plot - Make the plot?
{  # Use only cases where y > 0 - otherwise geometric mean undefined.
good.cases <- (y>0)
y <- y[good.cases]
x <- as.matrix(x)
x <- x[good.cases, , drop=F]
# Geometric mean of y.
g <- exp(mean(log(y)))
if(transform.x)
{
# An x column will only be transformed if all values
# are positive.
x.pos <- vector(mode= "logical", length=ncol(x))
for(j in 1:ncol(x))
x.pos[j] <- (min(x[j]) > 0)
x.name <- dimnames(x)[[2]]
if( mode(x.name)=="NULL")
x.name <- paste("X",1:ncol(x),sep="")
}
log.lik <- vector(mode ="numeric",length=length(lambda))
for(i in 1:length(lambda))
{
if(lambda[i] !=0)
{
# Don't apply constants. In particular, subtracting
# 1.0 would introduce intercept in no-intercept model.
# Normalizations aplied to SS(Res) later.
z <- y^lambda[i]
if (transform.x)
{
x.new <- x
x.new.name <- x.name
for(j in 1:ncol(x))
if(x.pos[j])
{
x.new[,j] <- x[,j]^lambda[i]
x.new.name[j] <- paste(x.name[j],"^",lambda[i], sep="")
}
}
}
else
{
z<- log(y)
if(transform.x)
{
x.new <- x
x.new.name <- x.name
for(j in 1:ncol(x))
if(x.pos[j])
{
x.new[,j] <- log(x[,j])
x.new.name[j] <- paste("log(",x.name[j],")",sep="")
}
}
}
if(transform.x)
{
dimnames(x.new) <- list(NULL,x.new.name)
reg <- lsfit(x.new,z,intercept=intercept)
}
else
reg <- lsfit(x,z,intercept = intercept)
if(verbose)
{ cat("Lambda:",lambda[i], "\n")
ls.print(reg)
}
res <- reg$residuals
ss.res <- sum(res^2)/g^(2.0*(lambda[i] - 1.0 ))
if (lambda[i] !=0.0)
ss.res <- ss.res/lambda[i]^2
log.lik[i] <- -length(y)/2.0*log(ss.res)
}
if(make.plot)
{
if(mode(ylim)=="NULL")
ylim <- range(log.lik)
plot(lambda,log.lik,ylim=ylim, ylab="Log Likelihood", type="b", lty=1)
abline(max(log.lik)-3.8416/2,0,lty=2)
}
return(log.lik)
}
### Tree data ###
?trees
data(trees)
pairs(trees)
cor(trees)
x <- trees[,1:2]
Y <- trees[,3]
par(mfrow=c(1,2))
box.cox(x,Y)
box.cox(x,Y,transform.x=TRUE) # now x is log(x)
library(MASS) ## error
boxcox(x,Y)
bad.result <- lm(Volume~Girth+Height,data=trees)
summary(bad.result)
plot(bad.result)
summary(bad.result)
plot(bad.result)
summary(result1)
plot(result1)
par(mfrow=c(1,2))
box.cox(x,Y)
box.cox(x,Y,transform.x=TRUE) # now x is log(x)
boxcox(x,Y)
bc$x[bc$y > max(bc$y) - 1/2 * qchisq(.95,1)]
bc$x
bc$y
max(bc$y) - 1/2 * qchisq(.95,1
max(bc$y) - 1/2 * qchisq(.95,1)
(max(bc$y) - 1/2 * qchisq(.95,1))
bc$y
bc$y > (max(bc$y) - 1/2 * qchisq(.95,1))
bc$x[bc$y > (max(bc$y) - 1/2 * qchisq(.95,1))]
(max(bc$y) - 1/2 * qchisq(.95,1))
(max(bc$y) - 1/2 * qchisq(.90,1))
(max(bc$y) - 1/2 * qchisq(.50,1))
bc$x[bc$y > (max(bc$y) - 1/2 * qchisq(.50,1))]
bc$x[bc$y > (max(bc$y) - 1/2 * qchisq(.95,1))]
bc$y
(max(bc$y) - 1/2 * qchisq(.95,1))
bc$y
(max(bc$y) - 1/2 * qchisq(.30,1))
(max(bc$y) - 1/2 * qchisq(.95,1))
qchisq(.95,1)
x <- subset(df, select = - c(season,temp))
x$casual <- x$casual+1
x$registered <- x$registered+1
x$mnth2 <- x$mnth^2
x$hr2 <- x$hr^2
x$weekday2 <- x$weekday^2
x$weathersit2 <- x$weathersit^2
x$atemp2 <- x$atemp^2
x$hum2 <- x$hum^2
x$windspeed2 <- x$windspeed^2
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
knitr::opts_chunk$set(echo = TRUE)
library(MPV)
library(MASS)
library(bestglm)
library(glmnet)
library(regclass)
df <- read.csv("hour.csv")
df<- subset(df, select = -c(instant,cnt,dteday))
model <- lm(casual ~. - registered, data = df)
summary(model)
plot(model)
VIF(model)
x <- subset(df, select = - c(season,atemp))
x$casual <- x$casual+1
x$registered <- x$registered+1
x$mnth2 <- x$mnth^2
x$hr2 <- x$hr^2
x$weekday2 <- x$weekday^2
x$weathersit2 <- x$weathersit^2
x$temp2 <- x$temp^2
x$hum2 <- x$hum^2
x$windspeed2 <- x$windspeed^2
model <- lm(casual ~. - registered, data = x)
summary(model)
plot(model)
bc<-boxcox(casual ~. - registered,data = x )
lambda <- bc$x[which.max(bc$y)]
model <- lm(((casual^lambda-1)/lambda) ~ . - registered, data = x)
summary(model)
plot(model)
bc$x[which.max(bc$y)]
lambda <- bc$x[which.max(bc$y)]
bc$x[which.max(bc$y)]
